stages:
  - check-format
  - build
  - test
  - setup-repo
  - test-installers1
  - test-installers2
  - deploy

default:
  image: $DOCKER_REGISTRY/rewriting/templates/cpp/ubuntu20
  tags: ["kubernetes"]

.conan_template: &conan_template |
  conan profile new default --detect && conan profile update settings.compiler.libcxx=libstdc++11 default
  conan remote add gitlab ${CI_API_V4_URL}/packages/conan
  conan user ci_user -r gitlab -p ${CI_JOB_TOKEN}

check-format:
  stage: check-format
  script:
    - pre-commit install-hooks
    - pre-commit run --all-files --show-diff-on-failure

build:
  stage: build
  needs: [check-format]
  image: $DOCKER_REGISTRY/rewriting/mc-asm/llvm11
  artifacts:
    paths:
      - build/
  script:
    - *conan_template
    - mkdir build
    - cd build
    - conan install .. --remote=gitlab
    - cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
    - make
    - cpack -G DEB -D CPACK_MCASM_DEBIAN_PACKAGE=lib
    - cpack -G DEB -D CPACK_MCASM_DEBIAN_PACKAGE=lib-dbg
    - cpack -G DEB -D CPACK_MCASM_DEBIAN_PACKAGE=dev
    - cpack -G DEB -D CPACK_MCASM_DEBIAN_PACKAGE=driver
    - cpack -G DEB -D CPACK_MCASM_DEBIAN_PACKAGE=driver-dbg

test:
  stage: test
  needs: [build]
  image: conanio/gcc8
  script:
    - cd build
    - ctest -V

setup-repo:
  stage: setup-repo
  needs: [build, test]
  artifacts:
    paths:
      - installers/
  script:
    - mkdir installers/
    - cp build/*.deb installers/
    - cp src/driver.cpp installers/
    - cd installers/ && dpkg-scanpackages . /dev/null > Packages

test-driver:
  stage: test-installers1
  needs: [setup-repo]
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/installers/ ./\n" >> /etc/apt/sources.list
    - apt-get update -y
    - apt-get install -y mcasm-driver
    - echo "ud2" | mcasm --target x86_64-linux-gnu - | grep "0f0b"

test-driver-dbg:
  stage: test-installers1
  needs: [setup-repo]
  script:
    - 'echo -e "\ndeb [trusted=yes] file:$(pwd)/installers/ ./\n" >> /etc/apt/sources.list'
    - apt-get update -y
    - apt-get install -y mcasm-driver mcasm-driver-dbg
    - '[ -f /usr/lib/debug/.build-id/$(readelf -n /usr/bin/mcasm | grep "Build ID: " | cut -d":" -f2 | sed -E "s/ ([a-f0-9]{2,})([a-f0-9]{30,})/\1\/\2/g").debug ]'

test-dev:
  stage: test-installers1
  needs: [setup-repo]
  artifacts:
    paths:
      - test-install
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/installers/ ./\n" >> /etc/apt/sources.list
    - apt-get update -y
    - apt-get install -y libmcasm-dev
    - gcc test/test_lib.c -o test-install -lmcasm
    - ./test-install

test-lib:
  stage: test-installers2
  needs: [setup-repo, test-dev]
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/installers/ ./\n" >> /etc/apt/sources.list
    - apt-get update -y
    - apt-get install -y libmcasm-dev
    - ./test-install

test-lib-dbg:
  stage: test-installers1
  needs: [setup-repo]
  script:
    - 'echo -e "\ndeb [trusted=yes] file:$(pwd)/installers/ ./\n" >> /etc/apt/sources.list'
    - apt-get update -y
    - apt-get install -y libmcasm libmcasm-dbg
    - '[ -f /usr/lib/debug/.build-id/$(readelf -n /usr/lib/libmcasm.so | grep "Build ID: " | cut -d":" -f2 | sed -E "s/ ([a-f0-9]{2,})([a-f0-9]{30,})/\1\/\2/g").debug ]'

deploy:
  stage: deploy
  needs: [setup-repo, test-driver, test-dev, test-lib]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*mcasm*.deb'
    expire_in: 1 week
  script:
    - cp installers/*.deb ./

python-wheel:
  stage: deploy
  needs: [build]
  image: $DOCKER_REGISTRY/rewriting/mc-asm/llvm11
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - mcasm-*-py*-*-*.whl
    expire_in: 1 week
  script:
    - make -t -C build
    - make -C build python-wheel
    - cp build/python/dist/*.whl ./

conan_package:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/mc-asm/llvm11
  script:
    - *conan_template
    - export CONAN_PACKAGE="mcasm/0.1@"$(echo ${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME} | sed -e "s/\\//+/g")/stable
    - conan create --remote=gitlab . ${CONAN_PACKAGE}
    - conan upload ${CONAN_PACKAGE} --all --remote=gitlab
